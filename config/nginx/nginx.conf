# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_processes 4;

# number of file descriptors used for nginx
worker_rlimit_nofile 100000;

# only log critical errors
error_log /var/log/nginx/error.log warn;
user nginx;
pid /var/run/nginx.pid;

# provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    # ulimit -n returns 1024

    worker_connections 1024;

    # optmized to serve many clients with each thread, essential for linux -- for testing environment
    # use epoll;

    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    multi_accept on;
}



http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '[$time_local] "$request" => $status in $request_time seconds';

    access_log /var/log/nginx/access.log main;
    server_names_hash_bucket_size 128;

    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s; 
    open_file_cache_valid 30s; 
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # to boost I/O on HDD we can disable access logs
    #access_log off;

    # copies data between one FD and other from within the kernel
    # faster then read() + write()
    sendfile on;

    # send headers in one peace, its better then sending them one by one 
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # reduce the data that needs to be sent over network -- for testing environment
    gzip on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/json application/xml;
    gzip_disable msie6;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # server will close connection after this time -- default 75
    keepalive_timeout 1000;
	
    proxy_connect_timeout 600;
    proxy_send_timeout 600;
    proxy_read_timeout 600;
    send_timeout 600;

    # number of requests client can make over keep-alive -- for testing environment
    keepalive_requests 100000;

    # handles the client buffer size. Most client buffers are coming from POST method form submissions. 128k is normally a good choice for this setting
    client_body_buffer_size 128k;

    # sets the max body buffer size. If the size in a request exceeds the configured value, the 413 (Request Entity Too Large) error is returned to the client. 
    client_max_body_size 100m;

    # handles the client header size. 1k is usually a sane choice for this by default.
    client_header_buffer_size    1k;

    # shows the maximum number and size of buffers for large client headers. 4 headers with 4k buffers should be sufficient here.
    large_client_header_buffers  4 4k;

    # sets the number and size of the buffers used for reading a response from a disk. 
    output_buffers 1 32k;

    postpone_output 1460;
	
    # sends directives for the time a server will wait for a header body to be sent. 
    client_header_timeout 10m;

    # sends directives for the time a server will wait for a body to be sent.
    client_body_timeout 10m;

    # don't send the nginx version number in error pages and Server header
    server_tokens off;

    # config to don't allow the browser to render the page inside an frame or iframe
    add_header X-Frame-Options SAMEORIGIN;

    # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    add_header X-Content-Type-Options nosniff;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    add_header X-XSS-Protection "1; mode=block";

    # you can tell the browser that it can only download content from the domains you explicitly allow
    # not working with IDEAS/Designer
    #add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://assets.zendesk.com; font-src 'self' https://themes.googleusercontent.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";

    # enable session resumption to improve https performance
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # enables server-side protection from BEAST attacks
    ssl_prefer_server_ciphers on;

    # disable SSLv3(enabled by default since nginx 0.8.19) since it's less secure then TLS
    ssl_protocols TLSv1.2;

    # ciphers chosen for forward secrecy and compatibility. Use the first one if users start complaining
    #ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384';

    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;

    # diffie-hellman improvements
    ssl_dhparam /etc/nginx/certs/dhparam4096.pem;
    ssl_ecdh_curve secp384r1:X25519:prime256v1;

    # resolver using google dns
    resolver 150.214.186.69 192.168.20.101 valid=300s;
    resolver_timeout 10s;

    # enable HSTS(HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=15768000; includeSubdomains; preload";

    # Just for 200, 204, 301, 302 and 304 status codes
    # For preflight reqs when the method OPTIONS resturns a 405 in Swagger we need  always
    map $upstream_http_access_control_allow_origin $headervalue {
      ''       '*';
      default  '';
    }

    add_header 'Access-Control-Allow-Origin' $headervalue always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range' always;
    add_header 'Access-Control-Expose-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range' always;

    server {
      listen 80;
      #listen [::]:80;
      return 301 https://$host$request_uri;
    }


    # include all config files    
    include /etc/nginx/conf.d/*.conf;
    
}
