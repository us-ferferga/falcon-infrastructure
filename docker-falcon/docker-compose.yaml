services:
# PROMETHEUS ==============================================================================
  falcon-prometheus:
    image: prom/prometheus:latest
    container_name: falcon-prometheus
    # TODO: ELIMINAR
    # En un principio este contenedor parece funcionar correctamente sin el extra_hosts, pero lo dejamos aquí
    # de mientras por si acaso, para no tener problemas extraños mientras que lo único que hacemos es intentar
    # poner en marcha la aplicación. Una vez ya tengamos la aplicación verdaderamente en marcha,
    # debemos de modificar las aplicaciones para que no tengan ninguna dirección "hardcodeada" y la configuración
    # sea completamente a través de variables de entorno y no haga falta
    # ningún "hack" de este tipo. Debemos de hacer que toda la configuración sea por variables de entorno y
    # no asumir nada sobre el despliegue del usuario.
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - falcon-assets-manager
    command:
      - --config.file=/etc/prometheus/config.yml
    volumes:
      - ../config/prometheus:/etc/prometheus:ro
    volumes_from:
      - falcon-assets-manager:ro
    networks:
      - governify-falcon
    ports:
     - 5900:9090
# =========================================
  falcon-render:
    container_name: falcon-render
    image: governify/render:v2.2.0
    # TODO: ELIMINAR
    # En un principio este contenedor parece funcionar correctamente sin el extra_hosts, pero lo dejamos aquí
    # de mientras por si acaso, para no tener problemas extraños mientras que lo único que hacemos es intentar
    # poner en marcha la aplicación. Una vez ya tengamos la aplicación verdaderamente en marcha,
    # debemos de modificar las aplicaciones para que no tengan ninguna dirección "hardcodeada" y la configuración
    # sea completamente a través de variables de entorno y no haga falta
    # ningún "hack" de este tipo. Debemos de hacer que toda la configuración sea por variables de entorno y
    # no asumir nada sobre el despliegue del usuario.
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - NODE_ENV=production
      - PORT=80
      - LOGIN_USER=${LOGIN_USER:?}
      - LOGIN_PASSWORD=${LOGIN_PASSWORD:?}
      - DEFAULT_VIEW=http://falcon-assets-manager/api/v1/public/renders/index/view.html
      - DEFAULT_CONTROLLER=http://falcon-assets-manager/api/v1/public/renders/index/controller.js
      - DEFAULT_MODEL=http://falcon-assets-manager/api/v1/public/renders/index/model.json
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
      - LAYOUT=bootstrap5.html
    networks:
      - governify-falcon
    ports:
      - 5100:5100
    depends_on:
      falcon-assets-manager:
        condition: service_healthy
# =========================================
  falcon-assets-manager:
    container_name: falcon-assets-manager
    image: 'governify/assets-manager:v1.4.1'
    # Needed so it can access the mounted files properly
    user: root
    # TODO: ELIMINAR
    # En un principio este contenedor parece funcionar correctamente sin el extra_hosts, pero lo dejamos aquí
    # de mientras por si acaso, para no tener problemas extraños mientras que lo único que hacemos es intentar
    # poner en marcha la aplicación. Una vez ya tengamos la aplicación verdaderamente en marcha,
    # debemos de modificar las aplicaciones para que no tengan ninguna dirección "hardcodeada" y la configuración
    # sea completamente a través de variables de entorno y no haga falta
    # ningún "hack" de este tipo. Debemos de hacer que toda la configuración sea por variables de entorno y
    # no asumir nada sobre el despliegue del usuario.
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - NODE_ENV=production
      - PORT=80
      - LOGIN_USER=${LOGIN_USER:?}
      - LOGIN_PASSWORD=${LOGIN_PASSWORD:?}
      - PRIVATE_KEY=${KEY_ASSETS_MANAGER_PRIVATE:?}
      - ASSETS_REPOSITORY=${ASSETS_REPOSITORY:?}
      - ASSETS_REPOSITORY_BRANCH=${ASSETS_REPOSITORY_BRANCH:?}
    networks:
      - governify-falcon
    ports:
      - 5200:80
    healthcheck:
      test: wget --quiet --tries=1 --spider http://127.0.0.1/api/v1/public/infrastructure.yaml || exit 1
      interval: 5s
    volumes:
      - '../assets:/home/project'
    restart: 'unless-stopped'
# =========================================
  falcon-reporter:
    container_name: falcon-reporter
    image: governify/reporter:v2.2.0
    # TODO: ELIMINAR
    # ESTE ES EL ÚNICO OBLIGATORIO DE TODOS LOS CONTENEDORES, puesto que
    # los datos de ejemplo proporcionados en fides (src/data/*.zip) vienen "hardcodeados" con "host.docker.internal"
    # Al igual que se indica en el resto de comentarios, una vez que tengamos la aplicación en marcha, debemos de
    # hacer que toda la configuración sea por variables de entorno y no asumir nada sobre el despliegue del usuario.
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - NODE_ENV=production
      - PORT=80
      - DB_HOST=influxdb
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
    networks:
      - governify-falcon
    ports:
      - 5300:80
    depends_on:
      falcon-influx-reporter:
        condition: service_started
      falcon-assets-manager:
        condition: service_healthy
# =========================================
  falcon-influx-reporter:
    container_name: falcon-influx-reporter
    image: 'influxdb:1.8.4-alpine'
    # TODO: ELIMINAR
    # En un principio este contenedor parece funcionar correctamente sin el extra_hosts, pero lo dejamos aquí
    # de mientras por si acaso, para no tener problemas extraños mientras que lo único que hacemos es intentar
    # poner en marcha la aplicación. Una vez ya tengamos la aplicación verdaderamente en marcha,
    # debemos de modificar las aplicaciones para que no tengan ninguna dirección "hardcodeada" y la configuración
    # sea completamente a través de variables de entorno y no haga falta
    # ningún "hack" de este tipo. Debemos de hacer que toda la configuración sea por variables de entorno y
    # no asumir nada sobre el despliegue del usuario.
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - INFLUXDB_BIND_ADDRESS=:8088
    volumes:
      - 'falcon-influxdb-volume:/var/lib/influxdb'
    networks:
      - governify-falcon
    ports:
      - 5002:8086
      - 8088:8088
# =========================================
  falcon-registry:
    container_name: falcon-registry
    image: 'governify/registry:develop'
    # TODO: ELIMINAR
    # En un principio este contenedor parece funcionar correctamente sin el extra_hosts, pero lo dejamos aquí
    # de mientras por si acaso, para no tener problemas extraños mientras que lo único que hacemos es intentar
    # poner en marcha la aplicación. Una vez ya tengamos la aplicación verdaderamente en marcha,
    # debemos de modificar las aplicaciones para que no tengan ninguna dirección "hardcodeada" y la configuración
    # sea completamente a través de variables de entorno y no haga falta
    # ningún "hack" de este tipo. Debemos de hacer que toda la configuración sea por variables de entorno y
    # no asumir nada sobre el despliegue del usuario.
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - NODE_ENV=production
      - PORT=80
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
    depends_on:
      falcon-assets-manager:
        condition: service_healthy
      falcon-mongo-registry:
        condition: service_started
    networks:
      - governify-falcon
    ports:
      - 5400:80
# =========================================
  falcon-mongo-registry:
    container_name: falcon-mongo-registry
    image: mongo
    # TODO: ELIMINAR
    # En un principio este contenedor parece funcionar correctamente sin el extra_hosts, pero lo dejamos aquí
    # de mientras por si acaso, para no tener problemas extraños mientras que lo único que hacemos es intentar
    # poner en marcha la aplicación. Una vez ya tengamos la aplicación verdaderamente en marcha,
    # debemos de modificar las aplicaciones para que no tengan ninguna dirección "hardcodeada" y la configuración
    # sea completamente a través de variables de entorno y no haga falta
    # ningún "hack" de este tipo. Debemos de hacer que toda la configuración sea por variables de entorno y
    # no asumir nada sobre el despliegue del usuario.
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - 'falcon-registry-db-volume:/data/db'
    networks:
      - governify-falcon
# =========================================
  falcon-collector-dynamic:
    container_name: falcon-collector-dynamic
    image: 'governify/collector-dynamic:v1.3.0'
    # TODO: ELIMINAR
    # En un principio este contenedor parece funcionar correctamente sin el extra_hosts, pero lo dejamos aquí
    # de mientras por si acaso, para no tener problemas extraños mientras que lo único que hacemos es intentar
    # poner en marcha la aplicación. Una vez ya tengamos la aplicación verdaderamente en marcha,
    # debemos de modificar las aplicaciones para que no tengan ninguna dirección "hardcodeada" y la configuración
    # sea completamente a través de variables de entorno y no haga falta
    # ningún "hack" de este tipo. Debemos de hacer que toda la configuración sea por variables de entorno y
    # no asumir nada sobre el despliegue del usuario.
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - NODE_ENV=production
      - PORT=80
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
    depends_on:
      falcon-assets-manager:
        condition: service_healthy
    networks:
      - governify-falcon
    ports:
      - 5501:80
# =========================================
  falcon-dashboard:
    container_name: falcon-dashboard
    image: governify/dashboard:latest
    # TODO: ELIMINAR
    # En un principio este contenedor parece funcionar correctamente sin el extra_hosts, pero lo dejamos aquí
    # de mientras por si acaso, para no tener problemas extraños mientras que lo único que hacemos es intentar
    # poner en marcha la aplicación. Una vez ya tengamos la aplicación verdaderamente en marcha,
    # debemos de modificar las aplicaciones para que no tengan ninguna dirección "hardcodeada" y la configuración
    # sea completamente a través de variables de entorno y no haga falta
    # ningún "hack" de este tipo. Debemos de hacer que toda la configuración sea por variables de entorno y
    # no asumir nada sobre el despliegue del usuario.
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - NODE_ENV=production
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
      - INFLUX_URL=http://falcon-influx-reporter:8086
      - GF_PATHS_PLUGINS=/usr/share/grafana/plugins
    networks:
      - governify-falcon
    ports:
      - 5600:3000
# =========================================
  falcon-director:
    container_name: falcon-director
    image: 'governify/director:v1.4.0'
    # TODO: ELIMINAR
    # En un principio este contenedor parece funcionar correctamente sin el extra_hosts, pero lo dejamos aquí
    # de mientras por si acaso, para no tener problemas extraños mientras que lo único que hacemos es intentar
    # poner en marcha la aplicación. Una vez ya tengamos la aplicación verdaderamente en marcha,
    # debemos de modificar las aplicaciones para que no tengan ninguna dirección "hardcodeada" y la configuración
    # sea completamente a través de variables de entorno y no haga falta
    # ningún "hack" de este tipo. Debemos de hacer que toda la configuración sea por variables de entorno y
    # no asumir nada sobre el despliegue del usuario.
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - NODE_ENV=production
      - PORT=80
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
      - INFLUXDB_BIND_ADDRESS=:8088
    depends_on:
      falcon-assets-manager:
        condition: service_healthy
    networks:
      - governify-falcon
    ports:
      - 5800:80

volumes:
  falcon-influxdb-volume: null
  falcon-registry-db-volume: null
networks:
  governify-falcon:
